name: CI/CD Pipeline


# Trigger the workflow on push to the main branch
on:
  push:
    branches: [main]

# Define environment variables     
env:
    AWS_REGION: us-east-1
    ECR_REGISTRY: 471112745159.dkr.ecr.us-east-1.amazonaws.com
    ECR_REPOSITORY: my-java-app
    CLUSTER_NAME: my-cluster
    IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout the source code from the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Configure AWS credentials using GitHub Secrets
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Log in to Amazon ECR to allow pushing Docker images
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Build the Docker image and push it to ECR
    - name: Build and Push Docker image
      run: |
        ECR_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker build -t $ECR_URI .
        docker push $ECR_URI

    # Update kubeconfig to interact with the EKS cluster
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name $CLUSTER_NAME

    
    # Deploy the application to EKS using Kubernetes manifests
    - name: Deploy to EKS
      run: |
        sed "s|<ECR_IMAGE_URI>|$ECR_URI|g" k8s/deployment.yaml| kubectl apply -f -
        kubectl apply -f k8s/service.yaml
        
    # Fetch Pod status and LoadBalancer IP
    - name: Fetch details
      run: |
        echo "Fetching pod details.."
        sleep 10
        kubectl get svc java-app-service
        kubectl get pods 

